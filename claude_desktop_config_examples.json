{
  "examples": [
    {
      "name": "Basic Configuration (No RBAC)",
      "description": "Uses global config file credentials - all users share same Apstra access",
      "config": {
        "mcpServers": {
          "apstra": {
            "command": "python3",
            "args": ["/path/to/apstra_mcp.py", "-t", "stdio", "-f", "/path/to/apstra_config.json"]
          }
        }
      },
      "notes": "Backward compatible - works exactly like original implementation"
    },
    
    {
      "name": "RBAC Configuration - Admin User", 
      "description": "Admin user with full Apstra privileges using environment variables",
      "config": {
        "mcpServers": {
          "apstra": {
            "command": "python3",
            "args": ["/path/to/apstra_mcp.py", "-t", "stdio"],
            "env": {
              "APSTRA_USERNAME": "admin@company.com",
              "APSTRA_PASSWORD": "admin_secure_password",
              "APSTRA_SERVER": "apstra.company.com",
              "APSTRA_PORT": "443"
            }
          }
        }
      },
      "notes": "Admin sees all blueprints, can deploy, create, delete based on Apstra RBAC"
    },
    
    {
      "name": "RBAC Configuration - Operator User",
      "description": "Operator user with limited Apstra privileges using environment variables", 
      "config": {
        "mcpServers": {
          "apstra": {
            "command": "python3", 
            "args": ["/path/to/apstra_mcp.py", "-t", "stdio"],
            "env": {
              "APSTRA_USERNAME": "operator@company.com",
              "APSTRA_PASSWORD": "operator_secure_password", 
              "APSTRA_SERVER": "apstra.company.com",
              "APSTRA_PORT": "443"
            }
          }
        }
      },
      "notes": "Operator sees only assigned blueprints, cannot deploy/delete based on Apstra RBAC"
    },
    
    {
      "name": "RBAC Configuration - Read-Only User",
      "description": "Read-only user with view-only Apstra privileges",
      "config": {
        "mcpServers": {
          "apstra": {
            "command": "python3",
            "args": ["/path/to/apstra_mcp.py", "-t", "stdio"],
            "env": {
              "APSTRA_USERNAME": "viewer@company.com", 
              "APSTRA_PASSWORD": "viewer_secure_password",
              "APSTRA_SERVER": "apstra.company.com",
              "APSTRA_PORT": "443"
            }
          }
        }
      },
      "notes": "Viewer can only access query tools (get_*), cannot deploy or create based on Apstra RBAC"
    },
    
    {
      "name": "Multiple Apstra Servers Configuration", 
      "description": "Connect to different Apstra servers or with different credentials",
      "config": {
        "mcpServers": {
          "apstra-prod": {
            "command": "python3",
            "args": ["/path/to/apstra_mcp.py", "-t", "stdio"],
            "env": {
              "APSTRA_USERNAME": "prod-admin@company.com",
              "APSTRA_PASSWORD": "prod_password",
              "APSTRA_SERVER": "apstra-prod.company.com",
              "APSTRA_PORT": "443"
            }
          },
          "apstra-staging": {
            "command": "python3", 
            "args": ["/path/to/apstra_mcp.py", "-t", "stdio"],
            "env": {
              "APSTRA_USERNAME": "staging-user@company.com",
              "APSTRA_PASSWORD": "staging_password", 
              "APSTRA_SERVER": "apstra-staging.company.com",
              "APSTRA_PORT": "8443"
            }
          }
        }
      },
      "notes": "Users can access both production and staging with different credentials per environment"
    }
  ],
  
  "setup_instructions": {
    "step1": "Choose the appropriate configuration example above",
    "step2": "Update the file paths to match your installation",
    "step3": "Replace example credentials with real Apstra user credentials", 
    "step4": "Save as ~/.claude_desktop_config.json (Mac) or %APPDATA%/Claude/claude_desktop_config.json (Windows)",
    "step5": "Restart Claude Desktop application",
    "step6": "Test with session_info tool to verify authentication mode"
  },
  
  "security_notes": {
    "credential_storage": "Environment variables are stored in Claude Desktop config - ensure file permissions are restrictive",
    "rbac_enforcement": "RBAC is enforced by Apstra server based on the user credentials provided",
    "audit_trail": "All actions are logged in Apstra with the actual user identity",
    "credential_rotation": "Update environment variables in config when passwords change"
  },
  
  "testing": {
    "verify_rbac": "Use 'session_info' tool to see which user/server is being used",
    "test_permissions": "Try different operations (get_bp, deploy, create_*) to verify Apstra RBAC enforcement", 
    "compare_users": "Configure different users to see different data access levels"
  }
}